# estimate mixture models for each pattern of contestation (start w components=1, inspect fit visually)
# tweak mvnmix function
my.mvnmix <- function (dat, components = 2, maxiter = 1000, tol = 1e-05, inits = NULL, 
    scatter = FALSE, plot.ell = TRUE, nrep = 1) 
{
    ret <- list()
    R <- components
    nd <- nrow(dat)
    np <- ncol(dat) - 1
    if (np > 1) {
        y <- dat[, 1]/10000
        dat[, -1] <- dat[, -1]/rowSums(dat[, -1])
        for (i in 3:(np + 1)) {
            y <- cbind(y, log(dat[, i]/dat[, 2]))
        }
    }
    else {
        dat[, 1] <- y <- rep(NA, nd)
        dat[, 2] <- rep(1, nd)
        trap <- T
        ret$cols <- names(dat)
        ret$N <- nd
        nrep <- 0
    }
    bestllik <- -Inf
    repl <- 1
    while (repl <= nrep) {
        mu.init <- matrix(y[sample(c(1:nd), R), ], ncol = np)
        sig.init <- array(0, dim = c(np, np, R))
        for (r in 1:R) {
            sig.init[, , r] <- (c(runif(1, 0.5, 1.5) * sd(y[, 
                1]), runif(np - 1, 0.2, 1)) * diag(np))^2
        }
        P.init <- matrix(runif(R, min = 0.25, max = 0.75), nrow = R, 
            ncol = 1)
        P.init <- P.init/sum(P.init)
        if (!is.null(inits)) {
            mu.init <- inits$mu
            sig.init <- inits$sig
            P.init <- inits$P
        }
        mu.old <- mu.init
        sig.old <- sig.init
        P.old <- P.init
        mu.new <- matrix(NA, nrow = R, ncol = ncol(y))
        sig.new <- array(NA, dim = c(np, np, R))
        P.new <- matrix(NA, nrow = R, ncol = 1)
        llik <- -Inf
        iter <- 1
        dll <- Inf
        while ((iter <= maxiter) & (dll > tol)) {
            iter <- iter + 1
            denom <- 0
            trap <- F
            for (r in 1:R) {
                trap.try <- try(dmvnorm(y, mean = mu.old[r, ], 
                  sigma = sig.old[, , r]), silent = T)
                if (inherits(trap.try, "try-error")) {
                  trap <- T
                }
            }
            if (trap) {
                llik <- c(llik, llik[iter - 1])
            }
            else {
                for (r in 1:R) {
                  denom <- denom + (dmvnorm(y, mean = mu.old[r, 
                    ], sigma = sig.old[, , r]) * P.old[r])
                }
                for (r in 1:R) {
                  rgivy <- (dmvnorm(y, mean = mu.old[r, ], sigma = sig.old[, 
                    , r]) * P.old[r])/denom
                  mu.new[r, ] <- (colSums(rgivy * y))/sum(rgivy)
                  d <- y - matrix(mu.new[r, ], nrow = nd, ncol = ncol(mu.new), 
                    byrow = T)
                  sig.new[, , r] <- (t(d) %*% (rgivy * d))/sum(rgivy)
                  P.new[r] <- sum(rgivy)/nd
                }
                mu.old <- mu.new
                sig.old <- sig.new
                P.old <- P.new
                llik <- c(llik, sum(log(denom)))
            }
            dll <- llik[iter] - llik[iter - 1]
        }
        if (!trap) {
            if (llik[iter] > bestllik) {
                bestllik <- llik[iter]
                ret$cols <- names(dat)
                ret$N <- nd
                ret$inits <- list()
                ret$inits$mu <- mu.init
                ret$inits$sig <- sig.init
                ret$inits$P <- P.init
                ret$mu <- mu.new
                ret$sig <- sig.new
                ret$P <- c(P.new)
                ret$ml <- llik[iter]
                ret$npar <- (R - 1) + (R * np) + (R * np * (np + 
                  1)/2)
                ret$aic <- (-2 * ret$ml) + (2 * ret$npar)
                ret$bic <- (-2 * ret$ml) + (log(nd) * ret$npar)
            }
            if (nrep > 1) {
                cat("Model ", repl, ": llik = ", llik[iter], 
                  " ... best llik = ", ret$ml, "\n", sep = "")
                flush.console()
            }
            repl <- repl + 1
        }
    }
    ret$y <- y
    ret$dat <- dat
    if (np > 1) {
        cat("\n For", R, "component distributions:")
        cat("\n   Number of districts:", ret$N)
        cat("\n   Maximum log-likelihood:", ret$ml)
        cat("\n   BIC:", ret$bic, "\n \n")
        if (scatter) {
            splom.lr(y, names(dat)[-1], ret$mu, ret$sig, ret$P, 
                plot.ell)
        }
    }
    else {
        cat(paste("\n Uncontested ", ret$cols[2], ": ", ret$N, 
            " districts \n \n", sep = ""))
    }
    return(ret)
}
environment(my.mvnmix) <- asNamespace('seatsvotes')
